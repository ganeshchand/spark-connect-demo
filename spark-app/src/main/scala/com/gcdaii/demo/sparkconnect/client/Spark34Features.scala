package com.gcdaii.demo.sparkconnect.client

import org.apache.spark.sql.SparkSession

object Spark34Features extends App {
  val spark = SparkSession.builder().remote("sc://localhost").build()

  import spark.implicits._
  /*
    UNPIVOT / MELT Operation in Spark 3.4
    https://issues.apache.org/jira/browse/SPARK-39876
    https://issues.apache.org/jira/browse/SPARK-38864
    This feature lets users convert a DataFrame from the wide format generated by a PIVOT operation back to the original tall format.
    This is also known as a MELT operation in other data processing systems.
   */

  val salesDataRaw = Seq(
    ("apple", "market1", 100),
    ("orange", "market1", 200),
    ("banana", "market1", 150),
    ("apple", "market2", 120),
    ("orange", "market2", 220),
    ("banana", "market2", 180)
  ).toDF("fruit", "market", "units_sold")

  salesDataRaw.show(false)

  // DataFrame API
  // PIVOT
  val salesByMarket = salesDataRaw.groupBy("fruit").pivot("market").sum("units_sold")
  salesByMarket.show(false)
  // UNPIVOT
  val salesData = salesByMarket.unpivot(Array($"fruit"), Array($"market1", $"market2"), "market", "units_sold")


  // SQL
  salesDataRaw.createOrReplaceTempView("sales")

  val pivotSQL = """
    SELECT *
    FROM sales
    PIVOT (
      Sum(units_sold)
      For market IN ('market1', 'market2')
    )"""


  spark.sql(pivotSQL).show(false)

  val unpivotSQL =
    """
      SELECT *
      FROM pivoted_sales
      UNPIVOT (
        units_sold FOR market IN (market1, market2)
    )"""

  spark.sql(unpivotSQL).show()

  /*
    GROUP BY ALL / ORDER BY ALL
    https://issues.apache.org/jira/browse/SPARK-41635
    https://issues.apache.org/jira/browse/SPARK-41637
    the analyzer automatically infers the grouping columns based on the expressions specified in the select clause:
    all expressions that don't include any aggregate expressions are pulled implicitly into the grouping columns.
    This avoids users having to specify individually the list of grouping columns in most cases.
   */

    // Before Spark 3.4

    spark.sql(
      """
        |SELECT fruit, market, SUM(units_sold) AS units_sold
        |FROM sales
        |GROUP BY fruit, market
        |""".stripMargin).show()

     // After Spark 3.4
    spark.sql(
      """
        |SELECT fruit, market, SUM(units_sold) AS units_sold
        |FROM sales
        |GROUP BY ALL
        |""".stripMargin).show()

}
